// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id
  username    String  @unique
  displayName String
  profilePic  String?

  // Optional because google login doesn't need these
  email        String? @unique
  passwordHash String?
  // For google login
  googleId     String? @unique

  sessions      Session[]
  organizations Organization[]

  createdAt DateTime           @default(now())
  Employees Employees[]
  Role      OrganizationRole[]

  // table name in database
  @@map("users")
}

enum Roles {
  owner
  admin
  user
}

model OrganizationRole {
  id     String @id @default(cuid())
  userId String
  orgId  String
  role   Roles

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  //one user cannot have multiple role in one org
  @@unique([userId, orgId])
  @@map("organization_role")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Organization {
  id             String             @id @default(cuid())
  name           String
  email          String?
  location       String?
  orgPic         String?
  ownerId        String
  user           User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Employees      Employees[]
  Tasks          Tasks[]
  JobOrders      JobOrders[]
  Schedules      Schedules[]
  updateMessages updateMessages[]
  Role           OrganizationRole[]

  @@map("organizations")
}

model Employees {
  id                String              @id @default(cuid())
  name              String
  email             String?
  area              String
  areaLat           Decimal
  areaLong          Decimal
  space             Decimal
  orgId             String
  userId            String?
  lastLat           Decimal?
  lastLong          Decimal?
  lastUpdatedAt     DateTime?
  currentLat        Decimal?
  currentLong       Decimal?
  organization      Organization        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user              User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  JobOrders         JobOrders[]
  EmployeeSchedules EmployeeSchedules[]

  @@map("employees")
}

enum TimeUnit {
  minutes
  hours
}

model Tasks {
  id                String   @id @default(cuid())
  task              String
  requiredTimeValue Decimal
  requiredTimeUnit  TimeUnit
  spaceNeeded       Decimal
  orgId             String

  organization Organization   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  JobOrderTask JobOrderTask[]

  @@map("tasks")
}

enum Status {
  unscheduled
  todo
  inprogress
  completed
}

model JobOrders {
  id            String   @id @default(cuid())
  orderNumber   String
  createdAt     DateTime @default(now())
  orgId         String
  address       String
  city          String
  postCode      String
  state         String
  country       String
  latitude      Decimal
  longitude     Decimal
  spaceRequried Decimal
  placeId       String
  updatedBy     String?

  organization   Organization   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  JobOrderTask   JobOrderTask[]
  schedules      Schedules?     @relation(fields: [schedulesId], references: [id], onDelete: SetNull)
  schedulesId    String?
  status         Status         @default(unscheduled)
  scheduledEmp   Employees?     @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  employeeId     String?
  scheduledOrder Int?

  @@map("job_orders")
}

model JobOrderTask {
  id         String @id @default(cuid())
  jobOrderId String
  taskId     String
  quantity   Int

  jobOrder JobOrders @relation(fields: [jobOrderId], references: [id], onDelete: Cascade)
  task     Tasks     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  //cannot have same task in one job order
  @@unique([jobOrderId, taskId])
  @@map("job_order_task")
}

model Schedules {
  id              String   @id @default(cuid())
  name            String
  orgId           String
  createdAt       DateTime @default(now())
  departAddress   String
  departCity      String
  departPostCode  String
  departState     String
  departCountry   String
  departLatitude  Decimal
  departLongitude Decimal
  departTime      DateTime
  departPlaceId   String

  jobOrder          JobOrders[]
  organization      Organization        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  EmployeeSchedules EmployeeSchedules[]

  @@map("schedules")
}

model EmployeeSchedules {
  id            String  @id @default(cuid())
  employeeId    String
  scheduleId    String
  totalDistance Decimal
  totalTime     Decimal
  totalOrders   Int
  totalSpace    Decimal

  employee Employees @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  schedule Schedules @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@map("employee_schedules")
}

model updateMessages {
  id        String   @id @default(cuid())
  message   String
  updatedAt DateTime @default(now())
  orgId     String

  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("update_messages")
}
